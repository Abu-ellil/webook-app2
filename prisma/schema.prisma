generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String
  image       String?
  date        DateTime
  venue       String
  category    String    @default("حفل موسيقي")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]
  seats       Seat[]
}

model Seat {
  id       String   @id @default(cuid())
  eventId  String
  row      String
  number   Int
  section  String
  price    Float
  category String
  isBooked Boolean  @default(false)
  booking  Booking?
  event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Booking {
  id            String   @id @default(cuid())
  eventId       String
  seatId        String   @unique
  customerName  String
  customerPhone String
  customerEmail String?
  totalAmount   Float
  status        String   @default("pending")
  paymentData   String?
  createdAt     DateTime @default(now())
  event         Event    @relation(fields: [eventId], references: [id])
  seat          Seat     @relation(fields: [seatId], references: [id])
}

model Admin {
  id       String @id @default(cuid())
  username String @unique
  password String
}

model Settings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model admin {
  id       String @id
  username String @unique
  password String
}

model booking {
  id            String    @id
  eventid       String
  seatid        String    @unique
  customername  String
  customerphone String
  customeremail String?
  totalamount   Float     @db.Real
  status        String?   @default("pending")
  paymentdata   String?
  createdat     DateTime? @default(now()) @db.Timestamp(6)
  event         event     @relation(fields: [eventid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  seat          seat      @relation(fields: [seatid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model event {
  id          String    @id
  title       String
  description String
  image       String?
  date        DateTime  @db.Timestamp(6)
  venue       String
  category    String?   @default("حفل موسيقي")
  createdat   DateTime? @default(now()) @db.Timestamp(6)
  updatedat   DateTime? @default(now()) @db.Timestamp(6)
  booking     booking[]
  seat        seat[]
}

model seat {
  id       String   @id
  eventid  String
  row      String
  number   Int
  section  String
  price    Float    @db.Real
  category String
  isbooked Boolean? @default(false)
  booking  booking?
  event    event    @relation(fields: [eventid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model settings {
  id        String    @id
  key       String    @unique
  value     String
  createdat DateTime? @default(now()) @db.Timestamp(6)
  updatedat DateTime? @default(now()) @db.Timestamp(6)
}
