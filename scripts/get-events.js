const { PrismaClient } = require("./sqlite-client");

// ุฅูุดุงุก ุนููู Prisma ูููุงุนุฏุฉ ุงููุญููุฉ (SQLite)
const prisma = new PrismaClient();

async function getAllEvents() {
  try {
    console.log("๐ ุฌุงุฑู ุฌูุจ ุฌููุน ุงููุนุงููุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช...");

    // ุฌูุจ ุฌููุน ุงููุนุงููุงุช ูุน ุงูููุงุนุฏ ูุงูุญุฌูุฒุงุช ุงููุฑุชุจุทุฉ ุจูุง
    const events = await prisma.event.findMany({
      include: {
        seats: true,
        bookings: {
          include: {
            seat: true,
          },
        },
      },
      orderBy: {
        date: 'asc', // ุชุฑุชูุจ ุงููุนุงููุงุช ุญุณุจ ุงูุชุงุฑูุฎ
      },
    });

    // ุทุจุงุนุฉ ุนุฏุฏ ุงููุนุงููุงุช
    console.log(`โ ุชู ุงูุนุซูุฑ ุนูู ${events.length} ูุนุงููุฉ`);

    // ุทุจุงุนุฉ ุชูุงุตูู ูู ูุนุงููุฉ
    events.forEach((event, index) => {
      console.log(`\n๐ ุงููุนุงููุฉ #${index + 1}:`);
      console.log(`   - ุงูุนููุงู: ${event.title}`);
      console.log(`   - ุงูุชุงุฑูุฎ: ${event.date.toLocaleString()}`);
      console.log(`   - ุงูููุงู: ${event.venue}`);
      console.log(`   - ุงูุชุตููู: ${event.category}`);
      console.log(`   - ุนุฏุฏ ุงูููุงุนุฏ: ${event.seats.length}`);
      console.log(`   - ุนุฏุฏ ุงูุญุฌูุฒุงุช: ${event.bookings.length}`);

      // ุทุจุงุนุฉ ุชูุงุตูู ุงูููุงุนุฏ
      if (event.seats.length > 0) {
        console.log(`\n   ๐ช ุชูุงุตูู ุงูููุงุนุฏ:`);
        const seatCategories = {};
        event.seats.forEach(seat => {
          if (!seatCategories[seat.category]) {
            seatCategories[seat.category] = 0;
          }
          seatCategories[seat.category]++;
        });

        for (const category in seatCategories) {
          const bookedSeats = event.seats.filter(seat => seat.category === category && seat.isBooked).length;
          console.log(`      - ${category}: ${seatCategories[category]} ููุนุฏ (ูุญุฌูุฒ: ${bookedSeats})`);
        }
      }
    });

    // ุญูุธ ุงูุจูุงูุงุช ูู ููู JSON
    const eventData = {
      events,
      count: events.length,
      exportDate: new Date().toISOString(),
    };

    const fs = require("fs");
    fs.writeFileSync(
      "events-export.json",
      JSON.stringify(eventData, null, 2),
      "utf8"
    );

    console.log(`\n๐ ุชู ุญูุธ ุจูุงูุงุช ุงููุนุงููุงุช ูู: events-export.json`);

    return eventData;
  } catch (error) {
    console.error("โ ุฎุทุฃ ูู ุฌูุจ ุงููุนุงููุงุช:", error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// ุชุดุบูู ุงูุฏุงูุฉ ุฅุฐุง ุชู ุงุณุชุฏุนุงุก ุงูููู ูุจุงุดุฑุฉ
if (require.main === module) {
  getAllEvents()
    .then(() => {
      console.log("\n๏ฟฝ ุงูุชููุช ุนูููุฉ ุฌูุจ ุงููุนุงููุงุช ุจูุฌุงุญ!");
      process.exit(0);
    })
    .catch((error) => {
      console.error("\nโ ูุดูุช ุนูููุฉ ุฌูุจ ุงููุนุงููุงุช:", error);
      process.exit(1);
    });
}

// ุชุตุฏูุฑ ุงูุฏุงูุฉ ููุงุณุชุฎุฏุงู ูู ูููุงุช ุฃุฎุฑู
module.exports = { getAllEvents };
